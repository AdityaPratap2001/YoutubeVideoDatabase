{"version":3,"sources":["Components/SearchBar.js","apis/youtube.js","Components/VideoItem.js","Components/VideoList.js","Components/VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","props","className","onSubmit","this","type","onChange","Component","axios","create","baseURL","VideoItem","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","renderedList","map","key","id","videoId","VideoDetail","videoSrc","description","KEY","App","selectedVideo","onTermSubmit","a","youtube","get","params","part","maxResults","q","response","data","items","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAgCeA,G,kNA5BbC,MAAQ,CAACC,KAAO,I,EAEhBC,cAAgB,SAACC,GACf,EAAKC,SAAS,CAACH,KAAOE,EAAME,OAAOC,S,EAErCC,aAAe,SAAAJ,GACbA,EAAMK,iBACN,EAAKC,MAAMF,aAAa,EAAKP,MAAMC,O,uDAInC,OACE,yBAAKS,UAAU,yBACb,0BAAMA,UAAU,UAAUC,SAAUC,KAAKL,cACvC,yBAAKG,UAAU,SAEb,+CACA,2BAAOG,KAAK,OAAOP,MAAOM,KAAKZ,MAAMC,KAC7Ba,SAAUF,KAAKV,uB,GApBXa,c,QCATC,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAU,0CCcGC,G,MAdG,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,MAAMC,EAAkB,EAAlBA,cACxB,OACE,yBAAKC,QAAS,kBAAMD,EAAcD,IAAQV,UAAU,mBAClD,yBAAKA,UAAU,WAAWa,IAAKH,EAAMI,QAAQC,WAAWC,OAAOC,IAC1DC,IAAKR,EAAMI,QAAQK,QACxB,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,UACZU,EAAMI,QAAQK,WCMVC,EAbG,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,OAAOV,EAAkB,EAAlBA,cAEnBW,EAAeD,EAAOE,KAAI,SAACb,GAC/B,OAAO,kBAAC,EAAD,CAAWc,IAAKd,EAAMe,GAAGC,QAAShB,MAAOA,EAAOC,cAAeA,OAGxE,OACE,yBAAKX,UAAU,2BACZsB,ICkBQK,EA1BK,SAAC,GAAY,IAAXjB,EAAU,EAAVA,MAEpB,IAAIA,EACF,OACE,2CAKJ,IAAMkB,EAAQ,wCAAoClB,EAAMe,GAAGC,SAE3D,OACE,6BACE,yBAAK1B,UAAU,YACb,4BAAQmB,MAAM,eAAeN,IAAKe,KAEpC,yBAAK5B,UAAU,cACb,wBAAIA,UAAU,aACXU,EAAMI,QAAQK,OAEjB,2BAAIT,EAAMI,QAAQe,gBChBpBC,EAAM,0CAmDGC,E,4MA/CbzC,MAAQ,CAAE+B,OAAS,GAAKW,cAAgB,M,EAMxCC,a,uCAAe,WAAM1C,GAAN,eAAA2C,EAAA,sEACUC,EAAQC,IAAI,UAAU,CAC3CC,OAAS,CACPC,KAAO,UACPC,WAAa,EACbf,IAAMM,EACNU,EAAIjD,KANK,OACPkD,EADO,OASb,EAAK/C,SAAS,CACZ2B,OAASoB,EAASC,KAAKC,MACvBX,cAAgBS,EAASC,KAAKC,MAAM,KAXzB,2C,wDAefhC,cAAgB,SAACD,GACf,EAAKhB,SAAS,CAACsC,cAAgBtB,K,kEAnB/BR,KAAK+B,aAAa,wB,+BAuBlB,OACE,yBAAKjC,UAAU,eAAe4C,MAAO,CAACC,UAAU,SAC9C,kBAAC,EAAD,CAAWhD,aAAcK,KAAK+B,eAC9B,yBAAKjC,UAAU,WACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,sBACb,kBAAC,EAAD,CAAaU,MAAOR,KAAKZ,MAAM0C,iBAEjC,yBAAKhC,UAAU,oBACb,kBAAC,EAAD,CACAW,cAAeT,KAAKS,cACpBU,OAAQnB,KAAKZ,MAAM+B,iB,GAvCfhB,aCGEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a957a7a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass SearchBar extends Component {\r\n  \r\n  state = {term : ''}\r\n\r\n  onInputChange = (event) =>{\r\n    this.setState({term : event.target.value});\r\n  };\r\n  onFormSubmit = event =>{\r\n    event.preventDefault();\r\n    this.props.onFormSubmit(this.state.term);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ui segment search-bar\">\r\n        <form className=\"ui form\" onSubmit={this.onFormSubmit}>\r\n          <div className=\"field\">\r\n            \r\n            <label>Video Search</label>\r\n            <input type=\"text\" value={this.state.term}\r\n                    onChange={this.onInputChange}\r\n            />\r\n\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL : 'https://www.googleapis.com/youtube/v3',\r\n});","import React from 'react';\r\nimport './VideoItem.css';\r\n\r\nconst VideoItem = ({video,onVideoSelect}) =>{\r\n  return(\r\n    <div onClick={() => onVideoSelect(video)} className=\"item video-item\">\r\n      <img className=\"ui image\" src={video.snippet.thumbnails.medium.url}\r\n           alt={video.snippet.title}/>\r\n      <div className=\"content\">\r\n        <div className=\"header\">\r\n          {video.snippet.title}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoItem;","import React from 'react';\r\nimport VideoItem from './VideoItem';\r\n\r\nconst VideoList = ({videos,onVideoSelect}) =>{\r\n\r\n  const renderedList = videos.map((video) => {\r\n    return <VideoItem key={video.id.videoId} video={video} onVideoSelect={onVideoSelect}/>\r\n  });\r\n  \r\n  return(\r\n    <div className=\"ui relaxed divided list\">\r\n      {renderedList}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoList;","import React from 'react';\r\nimport VideoItem from './VideoItem';\r\n\r\nconst VideoDetail = ({video}) =>{\r\n\r\n  if(!video){\r\n    return(\r\n      <div>\r\n        Loading!!!\r\n      </div>\r\n    )\r\n  }\r\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\r\n\r\n  return(\r\n    <div>\r\n      <div className=\"ui embed\">\r\n        <iframe title=\"video player\" src={videoSrc}/>\r\n      </div>\r\n      <div className=\"ui segment\">\r\n        <h4 className=\"ui header\">\r\n          {video.snippet.title}\r\n        </h4>\r\n        <p>{video.snippet.description}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VideoDetail;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from './Components/SearchBar';\nimport youtube from './apis/youtube';\nimport VideoList from './Components/VideoList';\nimport VideoDetail from './Components/VideoDetail';\n\nconst KEY = 'AIzaSyCA869NL1F5AFiGiT8rPXACkVaJ-hSX1ZQ';\n\nclass App extends Component {\n\n  state = { videos : [] , selectedVideo : null};\n\n  componentDidMount(){\n    this.onTermSubmit('s20 official video');\n  }\n\n  onTermSubmit = async term =>{\n    const response = await youtube.get('/search',{\n      params : {\n        part : 'snippet',\n        maxResults : 5,\n        key : KEY,\n        q : term\n      }\n    });\n    this.setState({\n      videos : response.data.items,\n      selectedVideo : response.data.items[0],\n    })\n  };\n\n  onVideoSelect = (video) =>{\n    this.setState({selectedVideo : video});\n  }\n\n  render() {\n    return (\n      <div className=\"ui container\" style={{marginTop:'20px'}}>\n        <SearchBar onFormSubmit={this.onTermSubmit}/>\n        <div className=\"ui grid\">\n          <div className=\"ui row\">\n            <div className=\"eleven wide column\">\n              <VideoDetail video={this.state.selectedVideo}/>\n            </div>\n            <div className=\"five wide column\">\n              <VideoList \n              onVideoSelect={this.onVideoSelect} \n              videos={this.state.videos}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}